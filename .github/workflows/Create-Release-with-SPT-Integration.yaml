on:
  schedule:
  - cron: '*/30 * * * *'
  workflow_dispatch:

name: Create Release with SPT Integration

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      trigger_build: ${{ steps.check.outputs.trigger_build }}
    steps:
      - name: Get latest release tag
        id: get_release
        run: |
          latest_release=$(curl -s "https://api.github.com/repos/project-fika/Fika-Server/releases/latest" | jq -r '.tag_name')
          echo "Latest release: $latest_release"
          echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV

      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Compare with last built release
        id: check
        run: |
          last_release=$(cat last_release.txt || echo "none")
          if [ "$last_release" != "$LATEST_RELEASE" ]; then
            echo "$LATEST_RELEASE" > last_release.txt
            echo "New release detected!"
            echo "trigger_build=true" >> $GITHUB_ENV
            echo "trigger_build=true" >> $GITHUB_OUTPUT
          else
            echo "No new release found."
            echo "trigger_build=false" >> $GITHUB_ENV
            echo "trigger_build=false" >> $GITHUB_OUTPUT
  
  build:
    needs: check-release
    if: ${{ needs.check-release.outputs.trigger_build }} == 'true'
    strategy:
      matrix:
        os: [ "ubuntu-latest" ,"windows-latest" ]
    permissions: write-all
    name: Create Release
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout FIKA-Server-Mod Branch
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Read package.json
        id: read_package_json
        run: echo "::set-output name=version::$(node -e 'console.log(require(`./package.json`).version)')"

      - name: Build Release Package
        id: build
        shell: pwsh
        run: |
          ./package_release_with_server.ps1 -Overwrite -Branch "3.10.5" -FIKACoopVer ${{ steps.read_package_json.outputs.version }}
          echo "ZIP_NAME=$(Get-Content "$env:GITHUB_OUTPUT" | Select-String -Pattern "^ZIP_NAME=").Value.Split('=')[1]" >> $GITHUB_ENV
          echo "COMMIT_SHORT=$(Get-Content "$env:GITHUB_OUTPUT" | Select-String -Pattern "^CommitShort=").Value.Split('=')[1]" >> $GITHUB_ENV
          echo "SPT_VERSION=$(Get-Content "$env:GITHUB_OUTPUT" | Select-String -Pattern "^SPT_VERSION=").Value.Split('=')[1]" >> $GITHUB_ENV

      - name: Debug output variables
        run: |
          echo "SPT_VERSION: ${{ env.SPT_VERSION }}"
          echo "COMMIT_SHORT: ${{ env.COMMIT_SHORT }}"
          echo "ZIP_NAME: ${{ env.ZIP_NAME }}"
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.read_package_json.outputs.version }}
          name: FIKACoop-${{ steps.read_package_json.outputs.version }}-WithSPT-${{ env.SPT_VERSION }}-${{ env.COMMIT_SHORT }}
          files: |
            ${{ env.ZIP_NAME }}
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
